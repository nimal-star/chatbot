import json
import re  # For extracting order ID

# Part 1: Dummy Tools
class Tool:
    def __init__(self, name, description):
        self.name = name
        self.description = description

    def execute(self, **kwargs):
        raise NotImplementedError("Subclasses must implement this method.")

class OrderDBTool(Tool):
    def __init__(self):
        super().__init__(
            name="OrderDBTool",
            description="Use this tool to get information about a customer's order status. Requires 'order_id'."
        )
        self.dummy_orders = {
            "ORD123": {"status": "Shipped", "estimated_delivery": "2025-05-15"},
            "ORD456": {"status": "Processing", "estimated_delivery": "2025-05-18"},
            "ORD789": {"status": "Delivered", "delivery_date": "2025-05-10"},
            "ORD101": {"status": "Cancelled", "estimated_delivery": None},
            "ORD102": {"status": "Shipped", "estimated_delivery": "2025-05-20"},
            "ORD103": {"status": "Processing", "estimated_delivery": "2025-05-22"},
            "ORD104": {"status": "Delivered", "delivery_date": "2025-05-12"},
            "ORD105": {"status": "Cancelled", "estimated_delivery": None},
            "ORD106": {"status": "Shipped", "estimated_delivery": "2025-05-25"},
        }

    def execute(self, order_id: str = None):
        if not order_id:
            return json.dumps({"error": "Order ID is required."})
        if order_id in self.dummy_orders:
            return json.dumps({"order_id": order_id, **self.dummy_orders[order_id]})
        else:
            return json.dumps({"error": f"Order ID '{order_id}' not found."})

class ProductInfoTool(Tool):
    def __init__(self):
        super().__init__(
            name="ProductInfoTool",
            description="Use this tool to get information about a product. Requires 'product_name'."
        )
        self.dummy_products = {
            "laptop": {"description": "A high-performance laptop.", "price": "$1200", "in_stock": True},
            "mouse": {"description": "An ergonomic wireless mouse.", "price": "$25", "in_stock": False},
            "keyboard": {"description": "A mechanical gaming keyboard.", "price": "$75", "in_stock": True},
            "smartphone": {"description": "A latest model smartphone.", "price": "$800", "in_stock": True},
            "tablet": {"description": "A lightweight tablet with a 10-inch display.", "price": "$300", "in_stock": True},
            "headphones": {"description": "Noise-cancelling over-ear headphones.", "price": "$150", "in_stock": True},
            "monitor": {"description": "A 27-inch 4K monitor.", "price": "$400", "in_stock": True},
        }

    def execute(self, product_name: str = None):
        if not product_name:
            return json.dumps({"error": "Product name is required."})
        product_name_lower = product_name.lower()
        if product_name_lower in self.dummy_products:
            return json.dumps(self.dummy_products[product_name_lower])
        else:
            return json.dumps({"error": f"Product '{product_name}' not found."})

class PolicyTool(Tool):
    def __init__(self):
        super().__init__(
            name="PolicyTool",
            description="Use this tool to get information about company policies, like 'return policy' or 'shipping policy'."
        )
        self.dummy_policies = {
            "return policy": "You can return items within 30 days of purchase for a full refund, provided they are in original condition.",
            "shipping policy": "Standard shipping takes 3-5 business days. Express shipping is available for an additional cost.",
            "privacy policy": "We value your privacy. Your data will not be shared with third parties without your consent.",
            "warranty policy": "All products come with a one-year warranty covering manufacturing defects.",
            "cancellation policy": "Orders can be cancelled within 24 hours of placement. After that, cancellation is not possible.",
            "customer support policy": "Our customer support is available 24/7 via email and phone. We aim to respond within 24 hours.",
            "payment policy": "We accept all major credit cards, PayPal, and bank transfers. Payments are processed securely.",
        }

    def execute(self, policy_type: str = None):
        if not policy_type:
            return json.dumps({"error": "Policy type is required."})
        policy_type_lower = policy_type.lower()
        if policy_type_lower in self.dummy_policies:
            return json.dumps({"policy": self.dummy_policies[policy_type_lower]})
        else:
            return json.dumps({"error": f"Policy '{policy_type}' not found."})

# Part 2: Mock LLM Call
def mock_llm_call(prompt_type: str, data: str = None, query: str = None, tool_description: str = None) -> str:
    if prompt_type == "formulate_response_with_data" and data:
        try:
            parsed_data = json.loads(data)
            if "error" in parsed_data:
                return f"I encountered an issue: {parsed_data['error']}. Could you please try again or rephrase?"

            if "order_id" in parsed_data and "status" in parsed_data:
                if parsed_data.get("delivery_date"):
                    return f"Your order {parsed_data['order_id']} has been Delivered on {parsed_data['delivery_date']}."
                elif parsed_data.get("estimated_delivery"):
                    return f"Your order {parsed_data['order_id']} is currently {parsed_data['status']}. Estimated delivery date: {parsed_data['estimated_delivery']}."
            elif "description" in parsed_data and "price" in parsed_data:
                stock_status = "in stock" if parsed_data["in_stock"] else "out of stock"
                return f"{parsed_data['description']} Price: {parsed_data['price']}. Availability: {stock_status}."
            elif "policy" in parsed_data:
                return parsed_data["policy"]

            return f"Here's what I found:\n{json.dumps(parsed_data, indent=2)}"

        except json.JSONDecodeError:
            return f"Here's the information: {data}"

    elif prompt_type == "formulate_response_no_data":
        return "I'm sorry, I couldn't find the specific information you're looking for using my current tools. Can I help with anything else?"
    elif prompt_type == "clarification":
        return "I need a bit more information to help with that. For example, please provide the order ID or product name."
    elif prompt_type == "choose_tool_reasoning":
        print("--- LLM Reasoning (Simulated) ---")
        print(f"User query: {query}")
        print(f"Considering tools: {tool_description}")
        print("--- End LLM Reasoning ---")
        return "Reasoning logged."
    else:
        return "I'm not sure how to respond to that."

# Part 3: Agent Class
class Agent:
    def __init__(self, tools: list):
        self.tools = {tool.name: tool for tool in tools}
        self.tool_descriptions_for_llm = "\n".join([f"- {tool.name}: {tool.description}" for tool in tools])

    def choose_tool(self, query: str):
        query_lower = query.lower()
        chosen_tool = None
        params = {}

        # Order logic with regex fix
        if "order" in query_lower:
            match = re.search(r"\bORD\d+\b", query, re.IGNORECASE)
            if match:
                params["order_id"] = match.group(0).upper()
            chosen_tool = self.tools.get("OrderDBTool")

        # Product logic
        elif any(p in query_lower for p in ["laptop", "mouse", "keyboard", "product"]):
            for p in ["laptop", "mouse", "keyboard"]:
                if p in query_lower:
                    params["product_name"] = p
                    break
            chosen_tool = self.tools.get("ProductInfoTool")
        # Policy logic
        elif "return" in query_lower and "policy" in query_lower:
            params["policy_type"] = "return policy"
            chosen_tool = self.tools.get("PolicyTool")
        elif "shipping" in query_lower and "policy" in query_lower:
            params["policy_type"] = "shipping policy"
            chosen_tool = self.tools.get("PolicyTool")
        elif "policy" in query_lower:
            chosen_tool = self.tools.get("PolicyTool")

        return chosen_tool, params

    def process_query(self, query: str) -> str:
        chosen_tool, params = self.choose_tool(query)
        response = ""

        if chosen_tool:
            print(f"[Agent Log] Chosen tool: {chosen_tool.name} with params: {params}")

            if chosen_tool.name == "OrderDBTool" and not params.get("order_id"):
                return mock_llm_call(prompt_type="clarification")
            if chosen_tool.name == "ProductInfoTool" and not params.get("product_name"):
                return mock_llm_call(prompt_type="clarification")
            if chosen_tool.name == "PolicyTool" and not params.get("policy_type"):
                return mock_llm_call(prompt_type="clarification")

            tool_output = chosen_tool.execute(**params)
            response = mock_llm_call(prompt_type="formulate_response_with_data", data=tool_output)
        else:
            print(f"[Agent Log] No specific tool chosen for the query.")
            response = mock_llm_call(prompt_type="formulate_response_no_data")

        return response

if __name__ == "__main__":
    order_tool = OrderDBTool()
    product_tool = ProductInfoTool()
    policy_tool = PolicyTool()
    all_tools = [order_tool, product_tool, policy_tool]

    support_agent = Agent(tools=all_tools)

    print("Welcome to E-commerce Customer Support Bot!")
    print("Ask about order status (e.g., 'What is the status of order ORD123?'),")
    print("product information (e.g., 'Tell me about the mouse'),")
    print("or policies (e.g., 'What is your return policy?'). Type 'exit' to quit.")

    while True:
        user_input = input("You: ")
        if user_input.lower() == 'exit':
            print("Bot: Thank you for contacting us. Goodbye!")
            break
        if not user_input.strip():
            print("Bot: Please type a question.")
            continue
        agent_response = support_agent.process_query(user_input)
        print(f"Bot: {agent_response}")
