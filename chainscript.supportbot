import json

# --- Part 1: Dummy Tools ---
class Tool:
    def _init_(self, name, description):
        self.name = name
        self.description = description

    def execute(self, **kwargs):
        raise NotImplementedError("Subclasses must implement this method.")

class OrderDBTool(Tool):
    def _init_(self):
        super()._init_(
            name="OrderDBTool",
            description="Use this tool to get information about a customer's order status. Requires 'order_id'."
        )
        self.dummy_orders = {
            "ORD123": {"status": "Shipped", "estimated_delivery": "2025-05-15"},
            "ORD456": {"status": "Processing", "estimated_delivery": "2025-05-18"},
            "ORD789": {"status": "Delivered", "delivery_date": "2025-05-10"},
            "ORD101": {"status": "Shipped", "estimated_delivery": "2025-05-20"},
            "ORD202": {"status": "Processing", "estimated_delivery": "2025-05-23"},
            "ORD303": {"status": "Delivered", "delivery_date": "2025-05-15"},
        }

    def execute(self, order_id: str = None):
        if not order_id:
            return json.dumps({"error": "Order ID is required."})
        if order_id in self.dummy_orders:
            return json.dumps(self.dummy_orders[order_id])
        else:
            return json.dumps({"error": f"No order found with ID {order_id}."})

class ProductInfoTool(Tool):
    def _init_(self):
        super()._init_(
            name="ProductInfoTool",
            description="Use this tool to get information about a product. Requires 'product_name'."
        )
        self.dummy_products = {
            "laptop": {"description": "A high-performance laptop.", "price": "$1200", "in_stock": True},
            "mouse": {"description": "An ergonomic wireless mouse.", "price": "$25", "in_stock": False},
            "keyboard": {"description": "A mechanical gaming keyboard.", "price": "$75", "in_stock": True},
        }

    def execute(self, product_name: str = None):
        if not product_name:
            return json.dumps({"error": "Product name is required."})
        product_name_lower = product_name.lower()
        if product_name_lower in self.dummy_products:
            return json.dumps(self.dummy_products[product_name_lower])
        else:
            return json.dumps({"error": f"No product found with name '{product_name}'."})

class PolicyTool(Tool):
    def _init_(self):
        super()._init_(
            name="PolicyTool",
            description="Use this tool to get information about company policies, like 'return policy' or 'shipping policy'."
        )
        self.dummy_policies = {
            "return policy": "You can return items within 30 days of purchase for a full refund, provided they are in original condition.",
            "shipping policy": "Standard shipping takes 3-5 business days. Express shipping is available for an additional cost.",
        }

    def execute(self, policy_type: str = None):
        if not policy_type:
            return json.dumps({"error": "Policy type is required."})
        policy_type_lower = policy_type.lower()
        if policy_type_lower in self.dummy_policies:
            return json.dumps({"policy": self.dummy_policies[policy_type_lower]})
        else:
            return json.dumps({"error": f"No policy found for '{policy_type}'."})

# --- Part 2: Mock LLM Call ---
def mock_llm_call(prompt_type: str, data: str = None, query: str = None, tool_description: str = None) -> str:
    if prompt_type == "formulate_response_with_data" and data:
        try:
            parsed_data = json.loads(data)
            if "error" in parsed_data:
                return f"I encountered an issue: {parsed_data['error']}. Could you please try again or rephrase?"
            return f"Here's what I found:\n{json.dumps(parsed_data, indent=2)}"
        except json.JSONDecodeError:
            return f"Here's the information: {data}"
    elif prompt_type == "formulate_response_no_data":
        return "I'm sorry, I couldn't find the specific information you're looking for using my current tools. Can I help with anything else?"
    elif prompt_type == "clarification":
        return f"I need a bit more information to help with that. For example, if you're asking about an order, please provide the order ID. If it's about a product, the product name would be helpful."
    elif prompt_type == "choose_tool_reasoning":
        print(f"--- LLM Reasoning (Simulated) ---")
        print(f"User query: {query}")
        print(f"Considering tools: {tool_description}")
        print(f"--- End LLM Reasoning ---")
        return "Reasoning logged."
    else:
        return "I'm not sure how to respond to that."

# --- Part 3: Agent Class ---
class Agent:
    def _init_(self, tools: list):
        self.tools = {tool.name: tool for tool in tools}
        self.tool_descriptions_for_llm = "\n".join([f"- {tool.name}: {tool.description}" for tool in tools])

    def choose_tool(self, query: str):
        query_lower = query.lower()
        chosen_tool = None
        params = {}

        # --- Handle direct order ID like 'ORD123'
        if query.strip().upper().startswith("ORD") and len(query.strip()) > 5:
            chosen_tool = self.tools.get("OrderDBTool")
            params["order_id"] = query.strip().upper()
            return chosen_tool, params

        # --- Handle direct product names like 'laptop'
        for item in ["laptop", "mouse", "keyboard"]:
            if query_lower.strip() == item:
                chosen_tool = self.tools.get("ProductInfoTool")
                params["product_name"] = item
                return chosen_tool, params

        # --- Full sentence matching
        if "order status" in query_lower or ("order" in query_lower and "id" in query_lower):
            words = query.split()
            for i, word in enumerate(words):
                if word.upper().startswith("ORD"):
                    params["order_id"] = word.upper()
                    break
            chosen_tool = self.tools.get("OrderDBTool")

        elif "product" in query_lower or "how much is" in query_lower or "tell me about" in query_lower:
            for item in ["laptop", "mouse", "keyboard"]:
                if item in query_lower:
                    params["product_name"] = item
                    break
            chosen_tool = self.tools.get("ProductInfoTool")

        elif "return policy" in query_lower:
            params["policy_type"] = "return policy"
            chosen_tool = self.tools.get("PolicyTool")
        elif "shipping policy" in query_lower:
            params["policy_type"] = "shipping policy"
            chosen_tool = self.tools.get("PolicyTool")
        elif "policy" in query_lower:
            chosen_tool = self.tools.get("PolicyTool")

        return chosen_tool, params

    def process_query(self, query: str) -> str:
        chosen_tool, params = self.choose_tool(query)
        response = ""

        if chosen_tool:
            print(f"[Agent Log] Chosen tool: {chosen_tool.name} with params: {params}")

            if chosen_tool.name == "OrderDBTool" and not params.get("order_id"):
                return mock_llm_call(prompt_type="clarification")

            if chosen_tool.name == "ProductInfoTool" and not params.get("product_name"):
                return mock_llm_call(prompt_type="clarification")

            if chosen_tool.name == "PolicywTool" and not params.get("policy_type"):
                return mock_llm_call(prompt_type="clarification")

            tool_output = chosen_tool.execute(**params)
            response = mock_llm_call(prompt_type="formulate_response_with_data", data=tool_output, query=query)
        else:
            print(f"[Agent Log] No specific tool chosen for the query.")
            response = mock_llm_call(prompt_type="formulate_response_no_data", query=query)

        return response

# --- Part 4: Main Interaction Loop ---
if __name__ == "_main_":
    order_tool = OrderDBTool()
    product_tool = ProductInfoTool()
    policy_tool = PolicyTool()
    all_tools = [order_tool, product_tool, policy_tool]

    support_agent = Agent(tools=all_tools)

    print("Welcome to E-commerce Customer Support Bot!")
    print("Ask about order status, product info, or return/shipping policy. Type 'exit' to quit.")

    while True:
        user_input = input("You: ")
        if user_input.lower() == 'exit':
            print("Bot: Thank you for contacting us. Goodbye!")
            break
        if not user_input.strip():
            print("Bot: Please type a question.")
            continue
        agent_response = support_agent.process_query(user_input)
        print(f"Bot: {agent_response}")
